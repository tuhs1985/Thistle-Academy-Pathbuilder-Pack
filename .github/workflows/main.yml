name: Create Module Files For GitHub Release


env:
  # The URL used for the module's "Project URL" link on FoundryVTT's website.
  project_url: "https://github.com/${{github.repository}}"

  # A URL that will always point to the latest manifest.
  # FoundryVTT uses this URL to check whether the current module version that
  # is installed is the latest version. This URL should NOT change,
  # otherwise FoundryVTT won't be able to perform this check.
  latest_manifest_url: "https://github.com/${{github.repository}}/releases/latest/download/module.json"

  # The URL to the module archive associated with the module release being
  # processed by this workflow.
  release_module_url: "https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip"


on:
  # Only run this workflow when a release is published.
  # To modify this workflow when other events occur, see:
  #   - https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  #   - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  #   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
  #
  # Note that some steps may depend on context variables that are only
  # available for release events, so if you add other events, you may need to
  # alter other parts of this workflow.
  release:
    types: [published]


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      # Extract version embedded in the tag.
      # This step expects the tag to be one of the following formats:
      #   - "v<major>.<minor>.<patch>" (e.g., "v1.2.3")
      #   - "<major>.<minor>.<patch>"  (e.g., "1.2.3")
      #
      # The version will be used by later steps to fill in the value for the
      # "version" key required for a valid module manifest.
      - name: Extract Version From Tag
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Update Release With Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './Pathbuilder-Packs/*.json,'
          tag: ${{ github.event.release.tag_name }}
          body: "README.md"
